{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Klaatu Barada Nikto!","text":""},{"location":"#zsh","title":"ZSH","text":"<p>Zsh, short for Z shell, is a powerful command-line shell for Unix-like operating systems. It is renowned for its advanced features, including improved tab completion, spelling correction, and powerful scripting capabilities. Zsh is highly customisable, allowing users to tailor their shell environment to their specific needs.</p> DocumentationCustomizationPlugins <ul> <li>ZSH.org</li> <li>ArchWiki - ZSH</li> <li>A User's Guide to the Z-Shell</li> <li>ZSH Cheatsheet</li> <li>ZSH DevHints</li> </ul> <ul> <li>Zinit</li> <li>Oh my ZSH</li> </ul> <ul> <li>Awesome ZSH Plugins</li> </ul>"},{"location":"#neovim","title":"NeoVim","text":"<p>NeoVim is a highly extensible text editor designed to enable efficient text editing. It builds on the strengths of Vim, offering improved user experience, modern features, and better plugin integration. Its open-source nature encourages contributions from the community, fostering rapid development and innovation.</p> DocumentationPluginsGit RepositoriesLearn <ul> <li>NeoVim</li> <li>Vim-plug</li> <li>Lazy</li> </ul> <ul> <li>NERDTree</li> <li>fzf.vim</li> <li>Vim-Prettier</li> <li>Lightline</li> </ul> <ul> <li>Vim Kickstarter</li> <li>Awesome Neovim</li> </ul> <ul> <li>VIM adventures</li> </ul>"},{"location":"#tmux","title":"Tmux","text":"<p>Tmux is a terminal multiplexer that allows users to run multiple terminal sessions within a single window. It enables users to detach and reattach sessions, making it easy to manage long-running processes. Tmux also supports window splitting, session management, and extensive customisation, enhancing productivity in the terminal.</p> Documentation <ul> <li>Tmux</li> <li>Tmux Plugin Manager</li> </ul>"},{"location":"#git","title":"Git","text":"LearningBadges and ShieldsGit HooksGithub <ul> <li>Gitlab Learn</li> <li>Gitignore Templates</li> <li>Git Branching</li> </ul> <ul> <li>ASCII Art</li> <li>Version Badge</li> <li>Shields.io</li> <li>Aleen42 Badges</li> <li>For The Badge</li> <li>Badgen</li> </ul> <ul> <li>Pre-Commit Official</li> <li>Pre-Commit Git Repo</li> <li>Awesome Git Hooks</li> </ul> <ul> <li>Github Docs</li> <li>Github Skills</li> </ul>"},{"location":"#pre-commit","title":"Pre-Commit","text":"Install Pre-Commit with Pip <p>Install pre-commit <pre><code>$&gt; pip install pre-commit\n</code></pre></p> <p>Create a file .pre-commit-config.yaml with the content <pre><code>repos:\n- repo: https://github.com/pre-commit/pre-commit-hooks\nrev: v4.5.0\nhooks:\n- id: check-merge-conflict\n- id: trailing-whitespace\n- id: end-of-file-fixer\n- id: check-added-large-files\n- id: detect-private-key\n</code></pre></p> <p>Install pre-commit hook <pre><code>$&gt; pre-commit install\n$&gt; pre-commit install-hooks\n</code></pre></p> <p>Run pre-commit hook <pre><code>$&gt; pre-commit run -a\n\ncheck for merge conflicts................................................Passed\ntrim trailing whitespace.................................................Passed\nfix end of files.........................................................Passed\ncheck for added large files..............................................Passed\ndetect private key.......................................................Passed\nmkdocs-buid..............................................................Passed\n</code></pre></p>"},{"location":"#asdf","title":"ASDF","text":"<p>ASDF is a versatile version manager for managing multiple runtime versions of different languages. It supports a wide range of programming languages and tools, enabling seamless switching between different versions for development projects. ASDF's plugin architecture allows easy extension, making it a flexible tool for developers.</p> ASDF Command line basics <p>ASDF UPDATE <pre><code>$&gt; asdf update --head\n</code></pre></p> <p>LIST PLUGIN <pre><code>$&gt; asdf plugin list all\n</code></pre></p> <p>ADD PLUGIN <pre><code>$&gt; asdf plugin add &lt;plugin_name&gt;\n</code></pre></p> <p>LIST PLUGIN VERSIONS <pre><code>$&gt; asdf list all &lt;plugin_name&gt;\n</code></pre></p> <p>INSTALL PLUGIN <pre><code># Install latest plugin version\n$&gt; asdf install &lt;plugin_name&gt;\n\n# Install a selected plugin version\n$&gt; asdf install &lt;plugin_name&gt; &lt;plugin_version&gt;\n</code></pre></p> <p>SETUP A PLUGIN VERSION <pre><code>$&gt; asdf global &lt;plugin_name&gt; &lt;plugin_version&gt; # Set the package global version\n$&gt; asdf local &lt;plugin_name&gt; &lt;plugin_version&gt;  # Set the package local version\n$&gt; asdf shell &lt;plugin_name&gt; &lt;plugin_version&gt;  # Set the package in the current shell\n</code></pre></p> Documentation <ul> <li>ASDF</li> </ul>"},{"location":"#obisidan","title":"Obisidan","text":"<p>Obsidian is a powerful note-taking and knowledge management application that uses plain text Markdown files. It offers features like backlinking, graph views, and plugins to help users create interconnected and structured notes. Obsidian's flexibility and customisability make it ideal for personal knowledge management and project organisation.</p> Documentation <ul> <li>Obsidian</li> </ul> Community <ul> <li>r/ObsidianMD</li> </ul>"},{"location":"#pimp-my-desktop","title":"Pimp my Desktop","text":"Themes <ul> <li>Dracula Theme</li> </ul>"},{"location":"#bookmarks","title":"Bookmarks","text":"<ul> <li>Cheat</li> <li>Awesome</li> <li>Terraform</li> </ul> LearnSites <ul> <li>CNCF</li> <li>RedHat Developers</li> <li>Mozilla Developers</li> <li>Google Style Guides </li> <li>Codeacademy</li> </ul> <ul> <li>Gbatemp</li> <li>Hackr.io</li> <li>Hashicorp</li> <li>DevDocs.io</li> <li>Zeal</li> </ul>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Klaatu Barada Nikto!</li> <li>SysAdmin</li> <li>Cloud</li> <li>Containers</li> <li>Code</li> <li>Monitoring</li> <li>CyberSecurity</li> </ul>"},{"location":"cloud/","title":"Cloud","text":""},{"location":"cloud/#aws","title":"AWS","text":"UsefulLearningCommunity <ul> <li>AWS Instances</li> </ul> <ul> <li>AWS Skill Builder</li> <li>W3 Schools: AWS</li> </ul> <ul> <li>r/AWS</li> <li>r/AWS Certifications</li> <li>r/Learn AWS</li> </ul>"},{"location":"cloud/#configure-aws-cli","title":"Configure AWS Cli","text":"<ul> <li>AWS Command Line Interface Documentation</li> </ul>"},{"location":"code/SUMMARY/","title":"SUMMARY","text":"<ul> <li>Shell</li> <li>Python</li> </ul>"},{"location":"code/python/","title":"Python","text":""},{"location":"code/python/#reference","title":"Reference","text":"DocumentationBooksLearningGit Repositories <ul> <li>Python Docs</li> <li>Python StyleGuide</li> <li>W3Schools</li> </ul> <ul> <li>Python Crash Course, 2nd edition</li> <li>Learn Python 3 the Hard Way</li> <li>Learn More Python 3 the Hard Way</li> <li>Automate the Boring Stuff with Python, 2nd Edition</li> </ul> <ul> <li>Geeks for Geeks: Python</li> <li>Learn Python 3: Absolute Begginers</li> </ul> <ul> <li>Easy-Python</li> <li>Tools of the Trade</li> <li>Awesome Python</li> </ul>"},{"location":"code/python/#pip","title":"Pip","text":"<p>Pip</p> <p>Install Pip <pre><code>$&gt; curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n$&gt; python3 get-pip.py --user\n</code></pre> Upgrade Pip <pre><code>$&gt; python3 -m pip install --upgrade pip\n</code></pre> Update Pip Package <pre><code>$&gt; pip3 install --upgrade --force-reinstall\n</code></pre> Freeze Pip packages <pre><code>$&gt; pip3 freeze &gt; requisites.txt\n</code></pre></p>"},{"location":"code/python/#reference_1","title":"Reference","text":"Documentation <ul> <li>MkDocs Documentation</li> <li>Python Markdown Extensions</li> </ul>"},{"location":"code/python/#virtualenv","title":"VirtualEnv","text":"<p>VirtualEnv</p> <p>Install VirtualEnv with Pip <pre><code>$&gt; pip3 install virtualenv\n</code></pre> Create a VirtualEnv project in the repo, take care that the path must be in the .gitignore file. <pre><code>$&gt; virtualenv -p python3.9 venv\n$&gt; source venv/bin/activate\n$&gt; pip install -r requeriments.txt\n</code></pre></p>"},{"location":"code/python/#reference_2","title":"Reference","text":"Documentation <ul> <li>MkDocs Documentation</li> <li>Python Markdown Extensions</li> </ul>"},{"location":"code/python/#mkdocs","title":"MkDocs","text":"<p>MkDocs</p> <p>Install mkdocs with Pip <pre><code>$&gt; pip3 install mkdocs\n</code></pre> Create a MkDocs project <pre><code>$&gt; python3 -m mkdocs new .\n</code></pre> Run the project and go to http://localhost:8000 <pre><code>$&gt; python3 -m mkdocs serve\n</code></pre></p>"},{"location":"code/python/#reference_3","title":"Reference","text":"DocumentationThemes <ul> <li>MkDocs Documentation</li> <li>Python Markdown Extensions</li> </ul> <ul> <li>Material for MkDocs</li> </ul>"},{"location":"code/shell/","title":"Shell scripting","text":""},{"location":"code/shell/#reference","title":"Reference","text":"DocumentationBooksGit Repositories <ul> <li>Shell StyleGuide</li> <li>Gnu Bash</li> <li>SS64: Bash</li> </ul> <ul> <li>Bash Cookbook, 2nd Edtion</li> </ul> <ul> <li>Awesome Shell</li> </ul>"},{"location":"code/shell/#variables","title":"Variables","text":"<p>Info</p> <p>The action taken by the shell will be different on each value here are some samples: <pre><code>FILE    = \"$PATH/this_is_a_file\"\nPATH    = \"/home/user/\"\nSTRING  = 'Hello World'\nCOMMAND = $( ls -l )\n</code></pre></p>"},{"location":"code/shell/#shell-built-in","title":"Shell Built-In","text":"<p>Built-in variables are automatically set by the shell and are typically used inside shell scripts</p> <p>Info</p> Variable Description <code>$#</code> Number of command-line arguments <code>$_</code> Options currently effect <code>$?</code> Exit value of the last exec command <code>$$</code> Process number of current process <code>$!</code> Process number of the last bg command <code>$0</code> First word, that is the command name <code>$1-9</code> Individual arguments (positional) <code>$*</code> Location of the user\u2019s mail spool <code>\"$@\"</code> Location of the user\u2019s mail spool"},{"location":"code/shell/#substitution","title":"Substitution","text":"<p>Info</p> Variable Description <code>var = value</code> Set each variable <code>var</code> to a value <code>${ var }</code> Use value of <code>var</code> <code>${ var :- value }</code> Use <code>var</code> if set; otherwise, use value <code>${ var := value }</code> YUse <code>var</code> if set; otherwise, use value and assign value to var <code>${ var :? value }</code> Use <code>var</code> if set; otherwise, print value and exit <code>${ var :+ value }</code> Use value if <code>var</code> is set; otherwise, use nothing"},{"location":"code/shell/#variables_1","title":"Variables","text":"<p>These variables are typically used in your \".profile\" file, and can be shown running \"echo $VAR\".</p> <p>Variables</p> Variable Description <code>USER</code> Your current username <code>HOSTNAME</code> Hostname of the computer <code>SHELL</code> Path to the current command shell <code>PWD</code> Current working directory <code>HOME</code> Home directory <code>MAIL</code> Location of the user\u2019s mail spool <code>LANG</code> Current language <code>TZ</code> Time zone <code>PS1</code> Default prompt in bash <code>TERM</code> Current terminal type <code>DISPLAY</code> Display used by X <code>EDITOR</code> Text editor <code>MANPATH</code> Path for Man pages <code>OSTYPE</code> Type of operating system <code>SECONDS</code> Seconds since the script was started <code>RANDOM</code> Returns a different random number each time"},{"location":"code/shell/#getopts","title":"Getopts","text":"<p>With a \"getops\" case you can add more logic to your scripts, making them more complex. It will take the command line arguments to but  they have to be added before a \"parameter\"</p> Example <pre><code>#!/bin/bash\nwhile getopts :a:b:c: opt ; do\n  case ${opt} in\n  a)\n    arg1=\"${OPTARG}\"\n    ;;\n  b)\n    arg2=\"${OPTARG}\"\n    ;;\n  c)\n    arg3=\"${OPTARG}\"\n    ;;\n  \\?)\n    echo \"Invalid option: -$OPTARG\" &gt;&amp;2\n    ;;\n  esac\ndone\necho $arg1 $arg2 $arg3\n</code></pre>"},{"location":"code/shell/#split-strings","title":"Split strings","text":"<p>Capture values from an output and use them in your script. Imagine that you want to parse a \"free -m\" command and get some values to work     with. If you run this command it will show you a \"table\" with all the metrics so let's manipulate this output.</p> <p>The standard output for free is this:</p> <p>Example</p> <pre><code>free -m\n              total        used        free      shared  buff/cache   available\nMem:          15896        1300       12360         359        2236       13906\nSwap:          2047         998        1049\n</code></pre> <p>As you know, to calculate avilable memory on a linux you must calculate with this expresion:</p> <p>Tip</p> <p>Free Memory = ( Total - Used + Buffer + Cache )</p> <p>We must parse the command and get the 2nd, 3rd and 6th values. Here, we should use \"set --   $FREE_MEM\" to parse this output, check this  out:</p> Example <pre><code>#!/bin/bash\n\nFREE_CMD=$(free -m | grep 'Mem:' )\necho $FREE_CMD                            # DEBUG COMMAND OUTPUT\necho \"\"\nset -- $FREE_CMD                          # HERE WE PARSE ARGUMENTS FROM \"$FREE_CMD\" OUTPUT\n\n# NOW I TAKE ARG VALUES AND SUBSTITUTE THEM AS INTEGERS\n# WITH \": '\\([0-9]\\+\\)'\" AFTER THE EXPR VALUE TAKEN.\nTOTAL_MEM=$(expr \"${2}\" : '\\([0-9]\\+\\)')  # ARG2 is TOTAL_MEM.\nUSED_MEM=$(expr \"${3}\" : '\\([0-9]\\+\\)')   # ARG3 is USED_MEM.\nFREE_MEM=$(expr \"${4}\" : '\\([0-9]\\+\\)')   # ARG4 is FREE_MEM.\nCACHE_MEM=$(expr \"${6}\" : '\\([0-9]\\+\\)')  # ARG4 is CACHE_MEM.\n\n# PRINT VARIABLES\necho \"Total: $TOTAL_MEM\"\necho \"Used: $USED_MEM\"\necho \"Buff/Cache: $CACHE_MEM\"\necho \"Free: $FREE_MEM\"\n\n# CALCULATE MEMORY\nMEM_USED=$(($USED_MEM + $CACHE_MEM))      # CALCULATE $USED_MEM + $CACHE_MEM\nAVAIL_MEM=$(($TOTAL_MEM - $MEM_USED))     # CALCULATE $TOTAL_MEM - $MEM_USED\necho \"Available: $AVAIL_MEM\"              # PRINT AVAIL_MEM VALUE\necho \"\"\n\n# TEST SCRIPT\nif [ $AVAIL_MEM -eq $FREE_MEM ]; then\n   echo \"Script is done\"\nelse\n   echo \"Something was wrong\"\nfi\n</code></pre>"},{"location":"code/shell/#substitution_1","title":"Substitution","text":"Example <pre><code>#!/bin/bash\n\nwhile getopts :a:b:c: opt ; do\n  case ${opt} in\n    a)\n      ANIMAL=\"${OPTARG}\"\n      ;;\n    b)\n      CITY=\"${OPTARG}\"\n      ;;\n    c)\n      OWNER=\"${OPTARG}\"\n      ;;\n    \\?)\n      echo \"Invalid option: -$OPTARG\" &gt;&amp;2\n      ;;\n    esac\n  done\n\nANIMAL=${ANIMAL:-\"dog\"}\nOWNER=${OWNER:-\"John\"}\nCITY=${CITY:-\"Madrid\"}\n\necho \"$OWNER has a $ANIMAL and lives in $CITY\"\n</code></pre>"},{"location":"code/shell/#redirects","title":"Redirects","text":"<p>Info</p> <p>Unix / Linux standard I/O streams with numbers:</p> Handle Name Description 0 stdin Get input from keyboard or program 1 stdout Write information on screen or file 2 stderr Show error message on screen or file Example <pre><code>command &gt;   filename        Redirect stdout to file \u201cfilename.\u201d\ncommand &gt;&gt;  filename        Redirect and append stdout to file \u201cfilename.\u201d\n\ncommand 2&gt;  filename        Redirect stderr to file \u201cfilename.\u201d\ncommand 2&gt;&gt; filename        Redirect and append stderr to file \u201cfilename.\u201d\n\ncommand &amp;&gt;  filename\ncommand &gt;   filename 2&gt;&amp;1   Redirect both stdout and stderr to file \u201cfilename.\u201d\n\ncommand &amp;&gt;&gt; filename\ncommand &gt;&gt;  filename 2&gt;&amp;1   Redirect both stdout and stderr append to file \u201cfilename.\u201d\n</code></pre>"},{"location":"code/shell/#operators","title":"Operators","text":""},{"location":"code/shell/#arithmetic","title":"Arithmetic","text":"<p>Info</p> <pre><code>+  -- echo `expr 3 + 4`        # 7\n+= -- n=3;echo $((n += 4))     # 7\n-  -- echo `expr 10 - 3`       # 7\n-= -- n=10;echo $((n -= 3))    # 7\n*  -- echo $((7 * 3))          # 21\n*= -- n=7;echo $((n * 11))     # 77\n** -- echo $((7 ** 3))         # 343\n/  -- let n=21/3;echo $n       # 7\n/= -- n=21;let n=n/3;echo $n   # 7\n%  -- echo `expr 21 % 4`       # 1 (reminder)\n%= -- n=21; expr `expr $n % 4` # 1 (reminder)\n</code></pre>"},{"location":"code/shell/#string","title":"String","text":"<p>Info</p> <pre><code>&gt;,&lt; -- String length compare\n-z  -- Zero length\n-n  -- Non-zero length\n</code></pre>"},{"location":"code/shell/#compare","title":"Compare","text":"<p>Info</p> <pre><code>-eq,== -- Equal\n-ne,!= -- Not equal\n-gt,&gt;  -- Greater than\n-ge,&gt;= -- Greater than or equal\n-lt,&lt;= -- Less than\n-le,&lt;  -- Less than or equal\n</code></pre>"},{"location":"code/shell/#file","title":"File","text":"<p>Info</p> <pre><code>-e    -- File or folder exists\n-f    -- File exists\n-d    -- Folder exists\n-s    -- File size is more than zero\n-b    -- File is a block special\n-c    -- File is a character special\n-p    -- File is a pipe\n-h,-L -- File is a symbolic link\n-S    -- File is a Socket\n-t    -- File is associated with a terminal\n-r    -- File has read permission\n-w    -- File has write permission\n-x    -- File has execute permission\n-g    -- File has SGID associated\n-u    -- File has SUID associated\n-k    -- File has Sticky bit\n-O    -- File has Owner ID\n-G    -- File has Group ID\n-N    -- File has been modified\n-nt   -- File is \"Newer than\" other\n-ot   -- File is \"Older than\" other\n-ef   -- File has two or more hardling pointing at same file\n</code></pre>"},{"location":"code/shell/#increment-decrement","title":"Increment / Decrement","text":"<p>Example</p> <pre><code>++ -- i=1;echo $((++i+7)) # 9 (PRE)\n++ -- i=1;echo $((i++))   # 1 (POST)\n-- -- i=7;echo $((--i-1)) # 5 (PRE)\n-- -- i=7;echo $((--i))   # 6 (POST)\n</code></pre>"},{"location":"code/shell/#logical","title":"Logical","text":"<p>Example</p> <pre><code>&amp;&amp; -- if [[ $INT = 7 &amp;&amp; $STRING = \"Lucky\" ]]; then echo \"Lucky Strike\"; fi # AND\n-a -- if [ 7 -gt 1 -a 7 -lt 8 ]; then echo \"OK\"; fi                        # AND\n|| -- if [[ $INT = 7 || $STRING = \"Lucky\" ]]; then echo \"Lucky Strike\"; fi # OR\n-o -- if [ 7 -gt 1 -a 8 -gt 7 ]; then echo \"OK\"; fi                        # OR\n!  -- if [[ !$STRING ]]; then echo \"Not so lucky\"; fi                      # NOT\n</code></pre>"},{"location":"code/shell/#ternary","title":"Ternary","text":"<p>\u2018?:\u2019 operator can be used as an alternative of if statement. The logical condition is defined before \u2018?\u2019  and if the condition returns true then it will execute the statement that is defined before \u2018:\u2019 otherwise it will execute the statement that is defined after \u2018:\u2019. The following script shows the use of this operator.</p> <p>Example</p> <pre><code>#!/bin/bash\n\nn=20\na=100\nb=200\necho $(( n&gt;=101 ? a : b )) # if n is \"great or equal\" to 101 then \"echo\" a, else \"echo\" b\n</code></pre>"},{"location":"code/shell/#bitwise","title":"Bitwise","text":"<p>Info</p> <pre><code>&amp;\n&amp;=\n|\n|=\n&gt;&gt;\n&gt;&gt;=\n</code></pre>"},{"location":"code/shell/#comma-operators","title":"comma 'operators'","text":"<p>\u2018,\u2019 operator is used to execute multiple statements in a line. The following command shows the use of this operator. The value of $n is assigned to 10, 30 is added with $n and the value of $n is printed.</p> <p>Example</p> <pre><code>#!/bin/bash\n\necho \"$(( n=10, n=n+30 ))\"\n</code></pre>"},{"location":"code/shell/#functions","title":"Functions","text":"<p>Think of a function as a small script within a script. It's a small chunk of code which you may call multiple times within your script. They are particularly useful if you have certain tasks which need to be performed several times.</p> <p>Tip</p> <pre><code>function_name () {\n  commands\n}\n\nfunction_name () { commands; }\n</code></pre> <p>Tip</p> <pre><code>function function_name {\n  commands\n}\n\nfunction function_name { commands; }\n</code></pre> Hello World <p><pre><code>#!/bin/bash\n\nhello_world () {\n   echo 'hello, world'\n}\n\nhello_world\n</code></pre> OUTPUT: <pre><code>Hello, world\n</code></pre></p> Variable Scope #1 <p><pre><code>#!/bin/bash\n\nvar1='A'\nvar2='B'\n\nmy_function () {\n  local var1='C'\n  var2='D'\n  echo \"Inside function: var1: $var1, var2: $var2\"\n}\n\necho \"Before executing function: var1: $var1, var2: $var2\"\n\nmy_function\n\necho \"After executing function: var1: $var1, var2: $var2\"\n</code></pre> OUTPUT: <pre><code>Before executing function: var1: A, var2: B\nInside function: var1: C, var2: D\nAfter executing function: var1: A, var2: D\n</code></pre></p> Variable Scope #2 <p><pre><code>#!/bin/bash\n\ndie(){\n  local m=\"$1\"  # the first arg\n    local e=$2    # the second arg\n    echo \"$m\"\n  exit $e\n}\n\n# if not enough args displayed, display an error and die\n[ $# -eq 0 ] &amp;&amp; die \"Usage: $0 filename\" 1\n\n# Rest of script goes here\necho \"We can start working the script...\"\n</code></pre> OUTPUT:</p> <p>if a parameter is added: <pre><code>We can start working the script...\n</code></pre> if not then: <pre><code>Usage: &lt;script_filename&gt; filename\n</code></pre></p>"},{"location":"code/shell/#shell-expansions","title":"Shell Expansions","text":"<ul> <li>GNU reference</li> </ul> <p>Info</p> <pre><code>touch {file1,file2}.md\nmkdir -p $HOME/{dir1,dir2}\n</code></pre>"},{"location":"code/shell/#patterns","title":"Patterns","text":"<p>Info</p> Pattern Description <code>*</code> Match zero or more characters <code>?</code> Match any single character <code>[...]</code> Match any of the characters in a set <code>?(patterns)</code> Match zero or one occurrences of the patterns (extglob) <code>*(patterns)</code> Match zero or more occurrences of the patterns (extglob) <code>+(patterns)</code> Match one or more occurrences of the patterns (extglob) <code>@(patterns)</code> Match one occurrence of the patterns (extglob) <code>!(patterns)</code> Match anything that doesn't match one of the patterns (extglob)"},{"location":"code/shell/#glob-regex","title":"Glob Regex","text":"<p>Info</p> Glob Regular Expression Equivalent Description <code>?(patterns)</code> <code>(regex)?</code> Match an optional regex <code>*(patterns)</code> <code>(regex)*</code> Match zero or more occurrences of a regex <code>+(patterns)</code> <code>(regex)+</code> Match one or more occurrences of a regex <code>@(patterns)</code> <code>(regex)</code> Match the regex (one occurrence)"},{"location":"code/shell/#statements","title":"Statements","text":""},{"location":"code/shell/#for","title":"For","text":"<p>Run a command in between \"$(command)\" to iterate:</p> <p>command</p> <pre><code>#!/bin/bash\n\nfor i in $( ls -1 ); do\n  echo $i\ndone\n</code></pre> <p>sequence</p> <p>Run a sequence in between \"seq 1 10\" to iterate: <pre><code>#!/bin/bash\n\nfor i in `seq 1 10`; do\n  echo $i\ndone\n</code></pre></p>"},{"location":"code/shell/#while","title":"While","text":"<p>Example</p> <pre><code>#!/bin/bash\n\nCOUNTER=0\nwhile [  $COUNTER -lt 10 ]; do\n    echo The counter is $COUNTER\n    let COUNTER=COUNTER+1\ndone\n</code></pre>"},{"location":"code/shell/#until","title":"Until","text":"<p>Example</p> <pre><code>#!/bin/bash\n\nCOUNTER=20\nuntil [  $COUNTER -lt 10 ]; do\n    echo COUNTER $COUNTER\n    let COUNTER-=1\ndone\n</code></pre>"},{"location":"code/shell/#arithmetic_1","title":"Arithmetic","text":""},{"location":"code/shell/#let-expression","title":"let expression\"","text":"<pre><code>    Make a variable equal to an expression.\n</code></pre> <p>Info</p> <pre><code>```\nOperator        Operation\n+, -, \\*, /   Addition, subtraction, multiply, divide\nvar++           Increase the variable var by 1\nvar--           Decrease the variable var by 1\n%               Modulus (Return the remainder after division)\n```\n</code></pre> <p>Example</p> <pre><code>#!/bin/bash\nlet a=5+4\necho $a # 9\n\nlet \"a = 5 + 4\"\necho $a # 9\n\nlet a++\necho $a # 10\n\nlet \"a = 4 * 5\"\necho $a # 20\n\nlet \"a = $1 + 30\"\necho $a # 30 + first command line argument\n</code></pre>"},{"location":"code/shell/#expr-expression","title":"expr expression","text":"<p>Print out the result of the expression.</p> <p>Example</p> <pre><code>#!/bin/bash\n\n# Basic arithmetic using expr\nexpr 5 + 4\nexpr \"5 + 4\"\nexpr 5+4\nexpr 5 \\* $1\nexpr 11 % 2\na=$( expr 10 - 3 )\necho $a # 7\n</code></pre>"},{"location":"code/shell/#expression","title":"$(( expression ))","text":"<p>Return the result of the expression.</p> <p>Example</p> <pre><code>#!/bin/bash\n\n# Basic arithmetic using double parentheses\na=$(( 4 + 5 ))\necho $a # 9\na=$((3+5))\necho $a # 8\nb=$(( a + 3 ))\necho $b # 11\nb=$(( $a + 4 ))\necho $b # 12\n(( b++ ))\necho $b # 13\n(( b += 3 ))\necho $b # 16\na=$(( 4 * 5 ))\necho $a # 20\n</code></pre>"},{"location":"code/shell/#var-expression","title":"${#var} expression","text":"<p>Return the length of the variable var.     <pre><code>#!/bin/bash\n\n# Show the length of a variable.\na='Hello World'\necho ${#a} # 11\nb=4953\necho ${#b} # 4\n</code></pre></p>"},{"location":"code/shell/#more-scripts","title":"+ More Scripts","text":"Scripts colors <pre><code>#!/bin/bash\n\nfor x in {0..8}; do\n  for i in {30..37}; do\n    for a in {40..47}; do\n      echo -ne \"\\e[$x;$i;$a\"\"m\\\\\\e[$x;$i;$a\"\"m\\e[0;37;40m \";\n    done;\n  echo;\n  done;\ndone\n</code></pre>"},{"location":"containers/","title":"Containers","text":""},{"location":"containers/#docker","title":"Docker","text":"DocumentationBuildersDebugComplianceEnvironment <ul> <li>img</li> </ul> <ul> <li>Dive</li> </ul> <ul> <li>Hadolint</li> <li>Trivy</li> <li>Scout</li> </ul> <ul> <li>Compose</li> </ul>"},{"location":"containers/#kubernetes","title":"Kubernetes","text":"DocumentationMinis (SelfHosted)Helm &amp; OperatorsPluginsCloudComplianceSecurity <ul> <li>Kubernetes</li> <li>Kubernetes Github</li> <li>Awesome Kubernetes</li> <li>Kubernetes SIGs</li> </ul> <ul> <li>Minikube</li> <li>Kind</li> <li>Matchbox</li> </ul> <ul> <li>Helm</li> <li>Helm Github</li> <li>Awesome Helm</li> <li>ArtifactHUB</li> <li>Kubernetes Operators</li> </ul> <ul> <li>Kubernetes Plugins</li> </ul> <ul> <li>AWS EKS</li> <li>Azure AKS</li> <li>Google GKE</li> </ul> <ul> <li>Kubeval</li> <li>Popeye</li> <li>Kube-Goat</li> </ul> <ul> <li>KubeHunter</li> <li>Kube-Bench</li> <li>Checkov</li> <li>Kubei</li> <li>Kube-Scan</li> <li>Kubeaudit</li> <li>Kubesec</li> </ul>"},{"location":"security/","title":"TBD","text":"DocumentationResourcesLearnSitesWordlistsBooks <ul> <li>OWASP Foundation</li> <li>Kali Org.</li> <li>Parrot Security</li> <li>BlackArch</li> <li>BackBox</li> <li>Fedora Security Spin</li> <li>OWASP Cheatsheets</li> </ul> <ul> <li>Docker Images</li> </ul> <ul> <li>Juice Shop</li> <li>Juice Shop Web</li> </ul> <ul> <li>Hackaday.io</li> <li>Hackster.io</li> </ul> <ul> <li>Fictional deities</li> <li>Mythologies</li> <li>Vampires</li> <li>Lovecraft Creatures</li> <li>Behind the Name</li> <li>Awesome Wordlist</li> <li>Probable Wordlists</li> </ul>"},{"location":"security/#tools","title":"Tools","text":"ToolsReconWeb PentestingGoogle DorkBug BountyExploitationDecoderOSINT <ul> <li>Kali Tools Listing</li> <li>Burp</li> <li>ZAP</li> </ul> <ul> <li>ping.eu</li> <li>HostingChecker</li> <li>HTTPStatus</li> <li>SSL Server Test</li> <li>Security Headers</li> <li>Mozilla SSL</li> <li>Skipfish</li> <li>ReconNG</li> <li>NmapAutomator</li> <li>DMitry</li> <li>SSL Scan</li> </ul> <ul> <li>Hacking</li> <li>dirsearch</li> <li>DirBuster</li> <li>GoBuster</li> <li>Nikto</li> <li>Dirb</li> <li>Fuff</li> <li>Wfuzz</li> </ul> <ul> <li>ExploitDB Dorks</li> <li>GBHackers</li> <li>go-dork</li> </ul> <ul> <li>Holy Tips</li> </ul> <ul> <li>Metasploit</li> <li>Metasploit Github</li> <li>Exploit Database</li> </ul> <ul> <li>Rot Decode</li> <li>Reqbin</li> </ul> <ul> <li>Maltego</li> <li>CaseFile</li> </ul> <pre><code>inurl:/view.shtml\nsite:hack-yourself-first.com filetype:pdf\npassword filetype:pdf site:hack-yourself-first.com\n?action= site:hack-yourself-first.com\n</code></pre>"},{"location":"sysadmin/","title":"SysAdmin","text":""},{"location":"sysadmin/#linux","title":"Linux","text":"DocumentationBooksLearningCommunity <ul> <li>Debian Docs</li> <li>Arch Linux</li> <li>Fedora Docs</li> <li>Kali Docs</li> <li>Raspberry PI</li> </ul> <ul> <li>The Linux Command Line by William Shotts</li> <li>Linux Bible by Christopher Negus</li> </ul> <ul> <li>Linux Journey</li> <li>Over The Wire: Wargames</li> <li>Linux Survival</li> <li>Terminus</li> <li>HackerRank</li> <li>PicoCTF</li> </ul> <ul> <li>r/Linux</li> </ul>"},{"location":"sysadmin/#macos","title":"MacOS","text":"DocumentationLearningCommunity <ul> <li>MacOS Support</li> <li>MacOS Developer</li> </ul> <ul> <li>r/MacOS</li> </ul>"}]}